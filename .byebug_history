c
request.headers
headers
request.params.to_json
request.path
endpoint
r.to_s
r
n
request
n
s
n
s
totp
password
username
c
continue
puts err
err
out
err, out = cmd.new(pty: true, printer: :null).run(" qr 'hi'")
cmd.new(pty: true, binmode: true).run(" qr 'hi'")
cmd.new(pty: true).run(" qr 'hi'")
c
out
n
continue
cmd.new.run('ls --color')
cmd.new.run('ls -l')
cmd.new.run('ls')
cmd.new(binmode: true).run(" qr '#{content}'")
cmd.new.run(" qr '#{content}'")
puts out
put out
out
err
out
n
TTY::Which.exist?('qr')
TTY::Wihch.exist?('qr')
content
c
exit
hash
s
all
n
s
Util::Cli.analyze_fields_flags(all, field_args)
field_args
all
continue
args.keys.filter { |k| k != :all }
args.keys
args
continue
args
arsg
command.call(**args)
command
continue
registration.dependencies
n
name
c
continue
n
name
dependencies
n
names.map { |n| [n, n] }.to_h.merge(kw_names)
names.map { |n|, [n, n] }.to_h.merge(kw_names)
names
s
n
name
n
s
n
@registrations
name
n
name
n
dependencies
n
s
name
continue
self.class.dependencies
dependencies
@_dependencies
@_dependencies[name]
name
c
n
@_dependencies[name]
name
method_name
exit
method_namec
method_name
method_names
s
n
s
n
kw_names
names
continue
prompt
output
@_dependencies
promptp
prompt
c
continue
**dependencies
dependencies
n
@registrations[name].dependencies
@registrations[name]
n
originator
name
